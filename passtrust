#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
Bundler.require(:default)


# colorful text
def colorize(text, color_code)
  "\e[#{color_code}m#{text}\e[0m"
end

def red(text); colorize(text, 31); end
def green(text); colorize(text, 32); end
def blue(text); colorize(text, 34); end

# define arguments
$options = OpenStruct.new
$options.verify = false
$options.length = 16
$options.timeout = 10
OptionParser.new do |opt|
  opt.banner = """  PassTrust Password Generator

  Usage: passtrust [options]"""

  opt.on('-v', '--verify', 'Ask the keyword twice') { $options.verify = true }
  opt.on('-l', '--length [LENGTH]', Integer, 'Change password length (default is 16, max is 64)') { |o| $options.length = o }
  opt.on('-t', '--timeout [SECONDS]', Integer, 'Change the amount of seconds the password will be on screen (default is 10)') { |o| $options.timeout = o }
  opt.on('-c', '--clipboard', 'Copy the password to the clipboard') { $options.clipboard = true }
  opt.on('-s', '--secret', 'Don\'t show any character when typing') { $options.secret = true }
  opt.on('-r', '--random', 'Don\'t ask for a passphrase, use a random one.') {$options.random = true }
  opt.on('-p', '--pass_security', 'Check the security of passphrase.') { $options.passphrase_security = true }

  opt.on_tail('-h', '--help', 'Show this message') do
    puts opt
    exit
  end
end.parse!

def ask_passphrase(prompt="Enter passphrase: ")
  $passphrase = ask(prompt) { |q| q.echo = $options.secret ? nil: "*" }
  $passphrase_verify = $passphrase
  if $options.passphrase_security
    check_security($passphrase)
  end
  $passphrase
  # thanks, skarlso
end

def ask_passphrase_verify
  $passphrase = ask_passphrase()

  $passphrase_verify = ask("Verify passphrase: ") { |q| q.echo = $options.secret ? nil : "*" }
  if $passphrase != $passphrase_verify
    puts red("Passphrases did not match")
    exit
  end

  if $options.passphrase_security
    check_security($passphrase)
  end
end

def magic(word)
  word = Base64.encode64(Digest::SHA512.hexdigest (Digest::SHA384.hexdigest (Digest::SHA2.hexdigest (Digest::SHA1.hexdigest word)))).gsub("\n","") + Base64.encode64(Digest::SHA512.hexdigest (Digest::SHA384.hexdigest (Digest::SHA1.hexdigest (Digest::SHA2.hexdigest word)))).gsub("\n","")
  word
end

def cls
  Gem.win_platform? ? (system "cls") : (system "reset")
end

def truncate(word)
  length = $options.length
  word = word.gsub("=","")
  word = word[0, (length/2)-1] + word[-(length/2), length]
  word
end

def print_password(word)
  timeout = $options.timeout

  word = truncate(word)
  puts "Your generated password is: #{green(word)}"


  if $options.clipboard == true
    Clipboard.copy word
    puts blue("Password has been copied to your clipboard.")
    puts red("Text in clipboard will be replaced with a fake after timer.")
  end

  t = Time.new(0) 
  timeout.downto(0) do |seconds|
    print "\rThe screen will clear in #{(t + seconds).strftime('%S')} seconds."
    sleep 1
  end
  
  if $options.clipboard == true
    Clipboard.copy truncate(magic(SecureRandom.base64))
  end
  cls
end

def check_security(word)
  puts green("Evaluating password security")
  puts green("0 => bad password | 4 => good password")
  score = Zxcvbn.test(word).score
  puts score
  if score < 3
    puts "Password is too weak. Choose a better one."
    exit 130
  end
end

def main
  if $options.length
    $options.length = $options.length.to_i
    if $options.length > 64
      puts red("#{$options.length} can't be used as password length")
      puts green("Maximum length is 64, using that.")
      $options.length = 64
    elsif $options.length < 16
      puts red("#{$options.length} can't be used as password length")
      puts green("Minimum length is 16, using that,")
      $options.length = 16
    end
    puts green("Password will be #{$options.length} characters long")
  end

  if $options.random
    puts "Your random passphrase is: "
    print_password(magic(p SecureRandom.base64))
    exit 130
  end
    
  if $options.secret
    puts green("Secret mode is activated")
  end

  if $options.passphrase_security
    puts green("Password security testing is activated")
  end

  if $options.verify
    puts green("Verification is on")
    ask_passphrase_verify()
  else
    ask_passphrase()
  end

  if $passphrase == $passphrase_verify
    print_password(magic($passphrase))
  end
end

if __FILE__ == $0
  trap "SIGINT" do
    exit 130
  end
  main()
end
