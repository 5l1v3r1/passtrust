#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
Bundler.require(:default)
begin
  require 'clipboard'
rescue LoadError
  puts ("\e[31mClipboard functionalities are disabled because of missing `clipboard` gem.\e[0m")
end


# colorful text
def colorize(text, color_code); "\e[#{color_code}m#{text}\e[0m"; end

def red(text); colorize(text, 31); end
def green(text); colorize(text, 32); end
def blue(text); colorize(text, 34); end

$options = OpenStruct.new
# default options
$version = "1.2.dev"
$options.verify = false
$options.length = 16
$options.timeout = 10
OptionParser.new do |opt|
  opt.banner = "  PassTrust Password Generator

  Usage: passtrust [options]"

  opt.on('-v', '--verify', 'Ask the keyword twice') { $options.verify = true }
  opt.on('-l', '--length [LENGTH]', Integer, 'Change password length (default is 16, max is 64)') { |o| $options.length = o }
  opt.on('-t', '--timeout [SECONDS]', Integer, 'Change the amount of seconds the password will be on screen (default is 10)') { |o| $options.timeout = o }
  opt.on('-c', '--clipboard', 'Copy the password to the clipboard') { $options.clipboard = true }
  opt.on('-s', '--secret', 'Don\'t show any character when typing') { $options.secret = true }
  opt.on('-r', '--random', 'Don\'t ask for a passphrase, use a random one.') {$options.random = true }
  opt.on('-p', '--pass_security', 'Check the security of passphrase.') { $options.passphrase_security = true }

  opt.on_tail('-h', '--help', 'Show this message') { puts opt; exit 130 }
  opt.on_tail('-V', '--version', 'Show version info') { puts "Version: #{$version}"; exit 130 }
end.parse!

def ask_passphrase(prompt="Enter passphrase: ")
  $passphrase = ask(prompt) { |q| q.echo = $options.secret ? nil: "*" }
  if $options.verify
    passphrase_verify = ask("Verify passphrase: ") { |q| q.echo = $options.secret ? nil : "*"}
    (puts red("Passphrases did not match"); exit 130) if !($passphrase == passphrase_verify)
  end
  check_security($passphrase) if $options.passphrase_security
  $passphrase
end

def magic(word)
  word = Base64.encode64(Digest::SHA512.hexdigest (Digest::SHA384.hexdigest (Digest::SHA2.hexdigest (Digest::SHA1.hexdigest word)))).gsub("\n","") + Base64.encode64(Digest::SHA512.hexdigest (Digest::SHA384.hexdigest (Digest::SHA1.hexdigest (Digest::SHA2.hexdigest word)))).gsub("\n","")
  length = $options.length
  word.gsub!("=","")
  word = word[0, (length/2)-1] + word[-(length/2), length]
end

def cls ;Gem.win_platform? ? (system "cls") : (system "reset"); end

def print_password(word)
  timeout = $options.timeout

  puts "Your generated password is: #{green(word)}"


  if $options.clipboard
    Clipboard.copy word
    puts blue("Password has been copied to your clipboard.")
    puts blue("Text in clipboard will be replaced with a fake after timer.")
  end

  t = Time.new(0) 
  timeout.downto(0) do |seconds|
    print "\rThe screen will clear in #{(t + seconds).strftime('%M:%S')} seconds."
    sleep 1
  end
  
  if $options.clipboard
    3.times { Clipboard.copy magic(SecureRandom.hex(16)) }
  end
  cls
end

def check_security(word)
  puts blue("Evaluating password security")
  score = Zxcvbn.test(word).score
  puts case score
    when 0, 1, 2; red("Score: #{score}/4")
    when 3, 4; green("Score: #{score}/4")
  end
  (puts red("Password is too weak. Choose a better one."); exit 130) if score < 3
end

def main
  if $options.length > 64
    puts red("#{$options.length} can't be used as password length")
    puts green("Maximum length is 64, using that.")
    $options.length = 64
  elsif $options.length < 16
    puts red("#{$options.length} can't be used as password length")
    puts green("Minimum length is 16, using that,")
    $options.length = 16
  end
  puts green("Password will be #{$options.length} characters long")

  # disable clipboard option if clipboard gem is not loaded
  $options.clipboard = false if not defined?(Clipboard)

  if $options.random
    puts "Your random passphrase is: "
    print_password(magic(p SecureRandom.hex(16)))
    exit 130
  end
   
  puts green("Secret mode is activated") if $options.secret

  puts green("Password security testing is activated") if $options.passphrase_security

  puts green("Verification is on") if $options.verify

  ask_passphrase
  print_password(magic($passphrase))
end

def leave
  Clipboard.copy magic(SecureRandom.hex(16)) if defined?(Clipboard)
  exit 130
end

if __FILE__ == $0
  trap "SIGINT" do
    puts "\r\nTerminated by user."
    begin; leave; rescue; exit 130; end
  end
  main
end
