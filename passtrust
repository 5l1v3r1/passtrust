#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
Bundler.require(:default)
begin
  require 'clipboard'
rescue LoadError
  puts ("\e[31mClipboard functionalities are disabled because of missing `clipboard` gem.\e[0m")
end

$options = OpenStruct.new

# default options
$version = "2.1"
$options.length = 16
$options.timeout = 10

OptionParser.new do |opt|

  opt.banner = "  Passtrust Password Generator

  Usage: passtrust [options]"

  opt.on('-v', '--verify', 'Ask the passphrase twice') { $options.verify = true }
  opt.on('-l', '--length [length]', Integer, 'Change password length (min 16 max 64)') { |o| $options.length = o }
  opt.on('-t', '--timeout [seconds]', Integer, 'Change default timeout (10 seconds)') { |o| $options.timeout = o }
  opt.on('-c', '--clipboard', 'Copy generated password to clipboard') { $options.clipboard = true }
  opt.on('-s', '--secret', 'Do not echo characters while typing') { $options.secret = true }
  opt.on('-r', '--random', 'Use a random passphrase') { $options.random = true }
  opt.on('-p', '--pass_security', 'Check security of passphrase') { $options.security = true }

  opt.on_tail('-h', '--help', 'Show this text') { puts opt; exit 130 }
  opt.on_tail('-V', '--version', 'Show version info and exit') { puts "Version: #{$version}"; exit 130 }

end.parse!

class ColorText

  def colorize(text, color_code); "\e[#{color_code}m#{text}\e[0m"; end
  def red(text); colorize(text, 31); end
  def green(text); colorize(text, 32); end
  def blue(text); colorize(text, 34); end

end

class Magic

  def base64_encode(word); Base64.encode64(word); end
  def sha512_digest(word); Digest::SHA512.hexdigest word; end
  def sha384_digest(word); Digest::SHA384.hexdigest word; end
  def sha2_digest(word); Digest::SHA2.hexdigest word; end
  def sha1_digest(word); Digest::SHA1.hexdigest word; end

  def magic(word, length)
    word = base64_encode(sha512_digest(sha384_digest(sha2_digest(sha1_digest(word))))).gsub("\n","") + base64_encode(sha512_digest(sha384_digest(sha1_digest(sha2_digest(word))))).gsub("\n","")
    word.gsub!("=","")
    word = word[0, (length/2)-1] + word[-(length/2), length]
  end

end

class Passtrust

  def initialize
    @options_length = $options.length
    @options_timeout = $options.timeout
    @options_clipboard = $options.clipboard
    @options_random = $options.random
    @options_security = $options.security
    @options_verify = $options.verify
    @options_secret = $options.secret

    @colorizer = ColorText.new
    @magic = Magic.new

    if @options_length > 64
      puts @colorizer.red("#{@options_length} can't be used")
      puts @colorizer.red("Max length is 64")
      @options_length = 64
    elsif @options_length < 16
      puts @colorizer.red("#{@options_length} can't be used")
      puts @colorizer.red("Min length is 16")
      @options_length = 16
    end

    puts @colorizer.green("Password will be #{@options_length} characters long")

    # disable clipboard if gem is not loaded
    @options_clipboard = false if not defined?(Clipboard)

    if @options_random
      puts "Your random passphrase is: "
      print_password(@magic.magic((p SecureRandom.hex(16)), @options_length))
      exit 130
    end

    if @options_secret
      puts @colorizer.green("Secret mode is activated")
    end

    if @options_security
      puts @colorizer.green("Security testing is activated")
    end

    if @options_verify
      puts @colorizer.green("Verification is activated")
    end
  end

  def get_passphrase(prompt="Enter passphrase: ")
    @passphrase = ask(prompt) { |q| q.echo = @options_secret ? nil : "*" }
    if @options_verify
      verify_passphrase
    elsif @options_security
      check_security(@passphrase)
    end
  end

  def verify_passphrase
    @verify = ask("Verify passphrase: ") { |q| q.echo = @options_secret ? nil : "*" }
    if !(@passphrase == @verify)
      puts @colorizer.red("Passphrases did not match")
      exit 130
    else
      puts @colorizer.green("Passphrase verified")
    end
  end

  def check_security(word)
    puts @colorizer.blue("Evaluating password security")
    score = Zxcvbn.test(word).score
    puts case score
      when 0, 1, 2; @colorizer.red("Score: #{score}/4")
      when 3, 4; @colorizer.green("Score: #{score}/4")
    end

    if score < 3
      puts @colorizer.red("Password is too weak. Choose a better one")
      exit 130
    end
  end

  def cls; Gem.win_platform? ? (system 'cls') : (system 'reset'); end

  def print_password(word, timeout = @options_timeout)
    puts "Your generated password is: #{@colorizer.green(word)}"

    if @options_clipboard
      Clipboard.copy word
      puts @colorizer.blue("Password has been copied to your clipboard.")
      puts @colorizer.blue("It will be replaced with a fake one after timer hits zero.")
    end

    t = Time.new(0)
    timeout.downto(0) do |seconds|
      print "\rThe screen will clear in #{(t + seconds).strftime('%M:%S')} seconds"
      sleep 1
    end

    if @options_clipboard
      3.times { Clipboard.copy @magic.magic(SecureRandom.hex(16), @options_length) }
    end
    cls
  end

  def start
    get_passphrase
    print_password(@magic.magic((@passphrase), @options_length))
  end

end

def leave
  length = $options.length
  if defined?(Clipboard)
    Clipboard.copy Magic.new.magic(SecureRandom.hex(16), length)
  end
  exit 130
end

def main
  password = Passtrust.new
  password.start
end

if __FILE__ == $0
  trap "SIGINT" do
    puts "\r\nTerminated by user."
    begin; leave; rescue; exit 130; end
  end
  main
end
